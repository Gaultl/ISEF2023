import java.util.Scanner;
import java.util.Arrays;

public class KYBER_512 {
    public static void main(String[] args) {
        System.out.println();
        System.out.println();
        System.out.println();

        KYBEROperations ops = new KYBEROperations();
        Scanner input = new Scanner(System.in);
        int q = 3329;
        int p = (q+1)/2;
        int q1 = 833;
        int q2 = 2497;
        int[] f = {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};
        int[][] s = {{-2, 0, -1, 1, -1, 1, 1, 1, -1, 0, -2, -2, 0, 1, 0, 0, -2, -1, 0, 1, -1, -2, -1, -1, -1, -2, -1, 0, -2, -2, -1, 0, 0, 1, 1, -2, 0, 0, 0, -2, -2, 1, 0, -1, -1, -2, -2, -2, 1, 1, 1, -1, 0, -2, -1, 1, -1, -2, -1, 1, -1, -2, -1, -1, 0, -2, 0, 0, 0, 0, -2, -2, 1, 0, 0, -1, -1, 0, 1, -1, -2, -1, 1, -1, -2, -2, 1, -2, 1, -1, 1, -1, -2, -2, -1, 1, 1, 0, -1, -2, -2, 0, -2, -1, 0, -2, -1, -1, 1, -2, -2, 1, 1, 0, 0, -2, -2, -1, 0, -2, 0, -1, 1, -1, -1, -2, -1, 0, -2, 0, -2, 1, 0, -1, 1, 0, -2, -2, 0, -2, -2, -1, 1, -1, 1, 1, -1, 1, 0, -1, 0, -2, -1, 1, 0, -1, 0, 1, -1, -2, -2, 1, 1, -2, 0, 1, 1, -1, 1, -1, -2, 0, -1, -1, 0, 1, -1, -2, 1, 1, -1, 0, 0, 0, -1, 0, 1, 1, 0, 0, -1, -1, -1, -1, 0, 1, 0, 1, -1, 1, -2, 1, -1, 0, 0, -2, -1, -1, -2, 0, -2, 1, -2, 1, 0, 1, 1, 0, -2, -2, 1, -2, -2, 1, 1, 0, 1, 1, 1, -1, -1, 0, 0, -1, -1, 0, -2, 1, -2, 0, -1, 0, -2, 1, 1, -1, 0, 1, 1, 1, -2, 1, 1, -2, 1, -1, -2}, {1, -1, 0, -1, 1, 1, -2, -1, 1, -1, 0, -1, -1, -1, 1, 0, -2, 1, 0, 0, -1, 0, 1, -1, 1, 1, -1, 0, -2, 0, 1, -1, 0, 1, 0, -2, 1, -1, -2, -2, -2, -2, 1, -1, 1, -1, -1, 1, -1, 0, -2, -2, -1, -2, 0, 1, 0, -1, -2, -2, 0, -2, -2, 1, -1, 1, -1, -1, 0, -1, 1, 0, -2, -1, -2, -1, -2, -2, -2, -2, 1, -1, -1, -1, 0, 0, -2, -1, 1, 0, -2, 0, -1, -1, -2, 0, -1, 0, 1, 1, -1, -1, 1, -2, 1, 1, -1, -2, -1, 1, -1, -1, 0, -1, 1, -2, 0, -2, -1, -1, 1, 1, 1, 0, 1, -2, 0, 0, -2, -2, -1, -2, -2, -1, 1, 0, -2, 0, -2, 1, 1, -2, 1, -1, 1, -2, 0, 1, -1, -1, -2, -1, -2, 0, -1, -1, -2, 0, 0, 0, -1, 0, 1, -2, -2, -2, 1, 1, 0, -1, 0, 0, 1, -1, -1, -1, -1, 0, 1, -1, -1, -2, -2, -1, -1, 0, 1, -2, -2, 1, 0, 1, 1, -1, 0, -2, -2, 1, -1, -1, -1, -2, -1, 1, -1, 0, 1, 0, -2, -2, 1, -1, 0, 0, 1, 1, 1, -2, 0, -1, -1, 1, -1, -2, -1, 0, 1, -2, 0, 0, 0, 0, -1, 1, 0, -2, 1, 1, -1, -1, -2, -2, -1, 1, 0, 1, 1, -2, -1, 1, 1, 0, 0, 0, -2, 0, -1}};
        int[][][] A = {{{2911, 1995, 3280, 2931, 1553, 233, 292, 2816, 1986, 1962, 827, 423, 374, 2175, 2301, 2801, 231, 1312, 2542, 1323, 2347, 2281, 2129, 2658, 1642, 3075, 1733, 2476, 2925, 1192, 1946, 638, 3008, 193, 1037, 2229, 1186, 2950, 1671, 2566, 832, 389, 825, 3164, 1403, 2238, 1185, 3166, 2597, 974, 797, 3087, 914, 1166, 300, 2055, 3191, 1410, 747, 2369, 2089, 660, 2847, 3015, 1278, 2460, 615, 3316, 427, 2273, 2111, 2581, 1448, 1500, 773, 1359, 1558, 444, 2236, 1478, 2040, 1086, 998, 2005, 889, 2681, 1244, 3322, 2684, 2051, 740, 1766, 283, 2768, 1933, 2476, 3158, 3227, 817, 1939, 522, 2725, 1266, 409, 2634, 700, 814, 1784, 2325, 302, 2885, 821, 2559, 377, 626, 1697, 2937, 2785, 1688, 1257, 567, 1823, 2115, 1207, 2758, 2197, 89, 3051, 338, 2079, 995, 748, 707, 976, 3230, 2383, 3156, 2409, 3189, 357, 1107, 1568, 1173, 2607, 1072, 1769, 868, 2598, 2454, 744, 187, 2308, 2358, 1545, 654, 1197, 2533, 304, 2962, 908, 958, 372, 917, 980, 1881, 47, 1532, 1254, 2188, 1912, 2339, 2325, 1759, 2999, 929, 2732, 1394, 2753, 253, 712, 307, 434, 2507, 2621, 2870, 1616, 1331, 2829, 1333, 1637, 3245, 904, 716, 2018, 1478, 1627, 1116, 1042, 1583, 1271, 592, 1327, 2455, 2, 2658, 2622, 1136, 1878, 2400, 3248, 2427, 518, 1099, 2490, 1212, 217, 1221, 1754, 2999, 2589, 1397, 1301, 430, 666, 1415, 1787, 2906, 2770, 329, 2369, 677, 807, 3028, 3109, 2583, 1277, 2243, 2155, 2772, 2, 350, 974, 1461, 2070, 2271, 614, 2694, 1338, 26, 1573, 550, 1307, 1453, 3117, 1401, 2146, 379}, {1067, 473, 3086, 2456, 3130, 2125, 2455, 922, 1056, 2531, 2362, 2060, 2276, 3174, 1648, 2017, 976, 1287, 2250, 687, 2022, 1762, 1002, 2102, 1991, 1223, 618, 180, 1984, 1898, 696, 683, 1159, 1015, 1514, 1807, 674, 240, 651, 2870, 2101, 2949, 1320, 659, 2059, 1213, 2109, 2047, 2672, 2669, 183, 50, 2118, 347, 997, 1341, 814, 1805, 265, 501, 381, 2099, 1617, 2229, 732, 336, 3085, 1889, 2307, 2794, 92, 2632, 2345, 2915, 2436, 1626, 2561, 3308, 1063, 1083, 1058, 993, 150, 2504, 3271, 405, 2088, 1049, 2459, 3268, 2887, 1396, 2381, 3056, 915, 322, 768, 1386, 2279, 759, 1210, 1033, 1693, 1206, 523, 1679, 1450, 2487, 1263, 306, 388, 1428, 2048, 1542, 2020, 1070, 1138, 979, 374, 3153, 1894, 2952, 2994, 529, 1850, 647, 178, 1721, 351, 3319, 509, 529, 3127, 441, 2695, 3123, 2330, 1242, 1576, 1080, 655, 1791, 2816, 207, 2044, 2304, 2505, 2871, 1785, 2758, 1131, 1578, 2683, 884, 76, 1044, 1436, 314, 2319, 1572, 3276, 1365, 1126, 1042, 621, 2418, 935, 238, 2273, 3109, 405, 2763, 1008, 1313, 1427, 7, 1614, 918, 572, 3262, 3013, 144, 193, 3077, 2585, 273, 2566, 2537, 2429, 2695, 1484, 1121, 2189, 851, 1935, 1052, 1425, 85, 3274, 2976, 2963, 2543, 928, 1824, 636, 2374, 3267, 379, 32, 2462, 356, 734, 3150, 789, 2783, 2298, 3283, 2189, 2661, 2860, 2108, 58, 430, 2961, 176, 2093, 1857, 223, 1034, 1574, 1570, 2488, 1967, 299, 102, 335, 327, 1972, 538, 151, 645, 1420, 1595, 2662, 698, 2685, 3234, 950, 973, 1059, 1919, 748, 1919, 206, 2102, 450, 3223}}, {{2770, 1761, 1974, 2734, 870, 2745, 229, 2786, 1872, 1541, 1215, 1935, 1597, 2532, 583, 416, 1127, 883, 1932, 1452, 2047, 2151, 1176, 1085, 982, 1069, 2610, 3151, 1280, 2040, 1246, 193, 1120, 2806, 497, 1843, 2759, 3094, 1745, 25, 935, 2413, 2123, 1154, 2433, 1834, 2687, 280, 730, 407, 999, 3166, 2031, 1115, 3088, 554, 2909, 638, 193, 132, 682, 1600, 1752, 232, 3308, 2282, 1912, 748, 1997, 44, 1303, 2036, 223, 1141, 164, 1102, 1373, 1260, 2058, 3015, 2975, 882, 159, 1015, 2305, 1540, 3128, 874, 2645, 2408, 2340, 880, 1503, 2017, 2329, 1091, 1660, 271, 2965, 1472, 3264, 1413, 649, 1105, 3297, 2607, 762, 96, 1198, 1692, 1179, 1956, 2844, 1967, 3306, 553, 2773, 1034, 3254, 2019, 2994, 1722, 1001, 1984, 3139, 2653, 43, 1562, 334, 481, 526, 2395, 1994, 2221, 1961, 1083, 472, 889, 734, 240, 1602, 732, 2580, 509, 326, 186, 1203, 1535, 1472, 580, 982, 519, 112, 600, 1327, 932, 2718, 51, 2223, 1429, 1880, 1931, 1917, 2477, 2670, 2265, 1637, 2560, 2192, 2772, 2158, 195, 1049, 2168, 2838, 2524, 706, 1004, 2211, 2552, 3287, 2566, 235, 1690, 649, 1699, 2662, 2621, 705, 1161, 892, 2254, 1285, 1446, 2782, 2973, 1316, 1241, 1561, 2195, 3321, 2162, 429, 2105, 2775, 2974, 720, 186, 2374, 1764, 578, 3167, 2869, 2981, 3050, 2729, 3102, 3124, 342, 57, 662, 760, 1305, 2331, 829, 322, 2410, 3327, 2125, 1344, 1224, 2862, 1537, 1933, 3131, 2704, 1664, 1116, 2829, 2671, 2104, 2097, 2175, 225, 1669, 1097, 2113, 3278, 3309, 716, 1639, 2503, 3197, 2995, 1381, 2464, 2465}, {1832, 3242, 1232, 1620, 718, 667, 1323, 3239, 3323, 3109, 1898, 1911, 864, 120, 2401, 1173, 1843, 1108, 1641, 2512, 3321, 769, 175, 772, 1160, 2591, 1202, 737, 475, 1923, 2592, 1037, 2902, 1229, 171, 282, 1055, 925, 43, 321, 2813, 2334, 2202, 2220, 2282, 1848, 2034, 2316, 3134, 456, 1070, 1661, 1245, 563, 3006, 2478, 2644, 2286, 2515, 3100, 800, 1033, 2570, 1629, 3278, 317, 1149, 1702, 2705, 1979, 3185, 1052, 3159, 3286, 2340, 1822, 1548, 431, 2352, 866, 3325, 543, 18, 1700, 470, 2933, 562, 935, 2975, 1329, 1966, 639, 664, 2671, 454, 1129, 2190, 1142, 1921, 2561, 628, 1532, 124, 1857, 1951, 1190, 1676, 657, 2086, 404, 965, 21, 2071, 1360, 823, 1936, 319, 1753, 1361, 2958, 1868, 1144, 2404, 1471, 731, 2745, 1612, 588, 2527, 534, 372, 105, 1139, 1287, 3059, 3214, 980, 373, 2134, 394, 3234, 1589, 1830, 314, 2577, 2488, 469, 2958, 1020, 4, 1766, 2705, 746, 776, 3025, 2942, 1376, 2660, 2025, 1758, 2507, 1848, 2064, 442, 2880, 726, 2232, 3072, 3119, 1499, 976, 2947, 3049, 3084, 2305, 3233, 369, 532, 1874, 2031, 1736, 650, 1541, 2149, 34, 1189, 2552, 556, 2582, 408, 2390, 1148, 1515, 2824, 1983, 1043, 1917, 1723, 1869, 1102, 54, 2952, 1053, 3176, 1958, 1414, 1003, 2354, 2850, 690, 2715, 2650, 2747, 1673, 262, 2420, 621, 404, 3243, 1057, 1345, 2449, 3077, 1543, 101, 916, 403, 705, 1004, 664, 373, 434, 786, 3047, 1909, 2384, 573, 2841, 3158, 1941, 3094, 2538, 1719, 1614, 1815, 1928, 1229, 2637, 2822, 2786, 2413, 3058, 3221, 3148, 3247, 1058, 817}}};
        int[][] t = {{202, 189, 1993, 2410, 575, 2834, 0, 809, 2479, 464, 1326, 1650, 2979, 970, 1673, 986, 2619, 622, 2463, 1993, 3099, 575, 3159, 1069, 950, 1952, 1473, 2554, 887, 728, 1793, 3082, 2187, 164, 159, 3018, 2406, 549, 1420, 1904, 94, 1522, 432, 935, 2318, 1848, 1974, 3242, 2641, 3046, 2928, 3195, 831, 3155, 51, 889, 2036, 2631, 2612, 1944, 545, 523, 261, 455, 143, 201, 495, 1239, 267, 1253, 2735, 1060, 2427, 1541, 356, 1339, 584, 1505, 1167, 1127, 1909, 3, 95, 2132, 315, 2846, 2999, 160, 1416, 82, 1198, 2476, 2072, 920, 3106, 560, 1454, 1874, 2985, 1700, 884, 2028, 499, 2615, 1836, 1635, 3084, 3319, 3038, 77, 2347, 567, 2923, 561, 1938, 2785, 670, 1793, 3139, 3111, 3009, 1263, 993, 2995, 2708, 2993, 658, 3314, 302, 2203, 3, 2786, 78, 593, 2491, 904, 2987, 459, 1240, 1358, 363, 1891, 1278, 2430, 1256, 1602, 2059, 2530, 1805, 2534, 2301, 803, 1877, 882, 507, 2819, 2111, 2165, 2952, 1373, 1696, 1969, 2485, 836, 941, 1747, 3125, 1785, 1992, 2280, 2080, 1027, 202, 1216, 445, 1901, 315, 873, 565, 494, 2458, 334, 3032, 2319, 3264, 2612, 2608, 2285, 3013, 2773, 1990, 2708, 884, 308, 2750, 2981, 356, 2710, 1835, 911, 516, 1024, 331, 2750, 164, 1237, 1751, 1586, 2625, 3141, 1045, 368, 1144, 2740, 1055, 3291, 1859, 1253, 2900, 1582, 725, 1972, 1487, 1042, 1785, 2630, 2256, 2813, 1888, 2815, 293, 2768, 748, 844, 511, 480, 2335, 2145, 1881, 1732, 1851, 894, 2488, 2980, 1957, 1742, 3284, 1119, 162, 1189, 1723, 680, 428, 1002, 2087, 2078}, {1350, 2180, 2321, 1378, 2380, 597, 80, 707, 1286, 2423, 794, 2151, 2712, 3249, 2434, 3169, 2838, 2102, 843, 209, 2118, 2814, 2995, 3128, 1120, 1799, 2433, 746, 540, 1679, 2700, 782, 248, 1944, 617, 3093, 1733, 1330, 1671, 1837, 3125, 230, 1778, 3306, 3256, 1871, 2414, 2913, 2012, 398, 664, 1835, 555, 3309, 580, 458, 537, 276, 2832, 1397, 386, 727, 1824, 2765, 2064, 1227, 1186, 291, 431, 3006, 1159, 743, 2363, 3059, 922, 3267, 114, 2679, 552, 2471, 2536, 232, 3284, 2125, 1241, 2552, 995, 463, 1726, 365, 101, 2312, 1042, 466, 647, 822, 924, 185, 2055, 2301, 2487, 1909, 29, 1721, 367, 2120, 3005, 758, 1921, 842, 301, 1698, 1567, 405, 3190, 2697, 2634, 978, 2759, 2609, 863, 2246, 2979, 1344, 2778, 2045, 1357, 1761, 3224, 227, 2804, 2123, 54, 554, 120, 2995, 1432, 2732, 1972, 2882, 1629, 1598, 95, 698, 1608, 3037, 2990, 226, 2622, 2807, 584, 1878, 2936, 2937, 3096, 3312, 2124, 70, 441, 2976, 2967, 1142, 504, 2767, 1375, 727, 677, 1570, 471, 1725, 3146, 1535, 1648, 555, 210, 2427, 2980, 1736, 3027, 180, 142, 2066, 226, 1376, 1494, 941, 218, 539, 432, 2596, 914, 2110, 2563, 1685, 1058, 1203, 1189, 1627, 2947, 2429, 3080, 124, 2487, 2446, 2623, 2298, 2033, 3050, 2383, 318, 1915, 2417, 2914, 1342, 3203, 156, 2732, 2711, 2457, 2498, 1506, 1105, 228, 530, 2310, 3307, 1664, 638, 2106, 909, 1844, 1697, 1554, 2726, 1310, 779, 475, 2768, 2407, 1803, 898, 3219, 1927, 1620, 2260, 429, 1225, 2497, 983, 1649, 2011, 2658, 1470, 1513, 2350, 3321}};
        int blocSize = 256;

        String response = "";

        while(true) {
            System.out.println("Do you want to encrypt or decrypt? enter done to finish");
            response = input.nextLine().toLowerCase();
            while (!response.equals("encrypt") && !response.equals("decrypt") && !response.equals("done")) {
                System.out.println("Please type 'encrypt', 'decrypt', or 'done'");
                response = input.nextLine().toLowerCase();
            }



            if (response.equals("encrypt")) {
                //accepts an input of characters from the user
                System.out.println("Enter the text you wish to encrypt");
                String plainText = " " + input.nextLine();

                int[][] message = ops.toScaledBinary(plainText, blocSize, p);
                int[][] r = {ops.polyRandom(255, 0, 2), ops.polyRandom(255, 0, 2)};
                int[][] e1 = {ops.polyRandom(255, 0, 2), ops.polyRandom(255, 0, 2)};
                int[] e2 = ops.polyRandom(255, 0, 2);
                int[][] u = new int[2][blocSize];
                int[][] v = new int[message.length][blocSize];

                long start = System.currentTimeMillis();

                //encrypt here

                for(int i = 0; i < A[0].length; i++){
                    int[] term;
                    int[] forMod = new int[A[0][0].length + r[0].length - 1];
                    for(int j = 0; j < A.length; j++){
                        int[] temp = ops.polyDist(A[j][i], r[j]);

                        for(int k = 0; k < temp.length; k++){
                            forMod[k] += temp[k];
                        }
                    }
                    term = ops.fullMod(forMod, f, q);
                    for(int l = 0; l < term.length; l++){
                        term[l] += e1[i][l];
                    }
                    u[i] = term;
                }

                int[] term;
                int[] forMod = new int[t[0].length + r[0].length - 1];
                for(int j = 0; j < t.length; j++){
                    int[] temp = ops.polyDist(t[j], r[j]);

                    for(int k = 0; k < temp.length; k++){
                        forMod[k] += temp[k];
                    }
                }
                term = ops.fullMod(forMod, f, q);
                for(int l = 0; l < term.length; l++){
                    term[l] += e2[l];
                }
                for(int i = 0; i < message.length; i++){
                    v[i] = term.clone();
                    for(int j = 0; j < message[i].length; j++){
                        v[i][j] += message[i][j];
                    }
                }

                System.out.println("Encrypted message displayed as:\nu\nv");
                System.out.println(Arrays.toString(u[0]).replaceAll("\\p{P}", "") + " , " + Arrays.toString(u[1]).replaceAll("\\p{P}", ""));
                for (int[] i: v) {
                    System.out.print(Arrays.toString(i).replaceAll("\\p{P}", "") + "  ");
                }

                long elapsedTime = System.currentTimeMillis() - start;

                System.out.println("\n\nElapsed Time: " + elapsedTime + " milliseconds");

                System.out.println();

            } else if (response.equals("decrypt")) {
                //accepts input of encrypted message from user
                System.out.println("Enter the ciphertext in the form: \nu\nv");
                String messyU = input.nextLine();
                String messyV = input.nextLine();

                long start = System.currentTimeMillis();

                int[][] u = ops.cleanUp(messyU, blocSize);
                int[][] v = ops.cleanVp(blocSize, messyV);
                int[][] MESSage = new int[v.length][blocSize];

                //decrypt here

                int[] su;
                int[] forMod = new int[s[0].length + u[0].length - 1];
                for(int j = 0; j < t.length; j++){
                    int[] temp = ops.polyDist(s[j], u[j]);

                    for(int k = 0; k < temp.length; k++){
                        forMod[k] += temp[k];
                    }
                }
                su = ops.fullMod(forMod, f, q);
                for(int i = 0; i < MESSage.length; i++){
                    for(int j = 0; j < MESSage[i].length; j++){
                        MESSage[i][j] = v[i][j] - su[j];
                    }
                    MESSage[i] = ops.coefMod(MESSage[i], q);
                }

                int[] message = new int[MESSage.length*MESSage[0].length];
                int count = 0;
                for (int[] ints : MESSage) {
                    for (int anInt : ints) {
                        if (anInt > q1 && anInt < q2) {
                            message[count] = 1;
                        } else {
                            message[count] = 0;
                        }
                        count++;
                    }
                }

                String CLEANage = ops.fromBinary(message).trim();
                System.out.println("\nDecrypted Message: ");
                System.out.println(CLEANage);

                long elapsedTime = System.currentTimeMillis() - start;

                System.out.println("\nElapsed Time: " + elapsedTime + " milliseconds\n");

            } else {
                break;
            }
        }
    }
}


